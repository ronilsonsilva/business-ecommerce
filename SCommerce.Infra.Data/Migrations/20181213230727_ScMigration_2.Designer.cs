// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCommerce.Infra.Data.EF;

namespace SCommerce.Infra.Data.Migrations
{
    [DbContext(typeof(ScContext))]
    [Migration("20181213230727_ScMigration_2")]
    partial class ScMigration_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Anexo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Arquivo")
                        .IsRequired();

                    b.Property<Guid>("IdOCMensagem");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Tipo")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("IdOCMensagem");

                    b.ToTable("Anexo");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Cidade", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdProvincia");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("IdProvincia");

                    b.ToTable("Cidade");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoEmail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("NomeContato");

                    b.HasKey("ID");

                    b.ToTable("ContatoEmail");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoLoja", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdLoja");

                    b.Property<string>("NomeContato")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("IdLoja");

                    b.ToTable("ContatoLoja");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoLojaEmail", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdContatoEmail");

                    b.Property<Guid>("IdContatoLoja");

                    b.HasKey("ID");

                    b.HasIndex("IdContatoEmail");

                    b.HasIndex("IdContatoLoja");

                    b.ToTable("ContatoLojaEmail");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoLojaEndereco", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdContatoLoja");

                    b.Property<Guid>("IdEndereco");

                    b.HasKey("ID");

                    b.HasIndex("IdContatoLoja");

                    b.HasIndex("IdEndereco");

                    b.ToTable("ContatoLojaEndereco");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoLojaRedeSocial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdContatoLoja");

                    b.Property<Guid>("IdContatoRedeSocial");

                    b.HasKey("ID");

                    b.HasIndex("IdContatoLoja");

                    b.HasIndex("IdContatoRedeSocial");

                    b.ToTable("ContatoLojaRedeSocial");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoLojaTelefone", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdContatoLoja");

                    b.Property<Guid>("IdContatoTelefone");

                    b.HasKey("ID");

                    b.HasIndex("IdContatoLoja");

                    b.HasIndex("IdContatoTelefone");

                    b.ToTable("ContatoLojaTelefone");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoRedeSocial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("IdentificadorUsuario");

                    b.Property<string>("RedeSocial");

                    b.Property<string>("URL");

                    b.HasKey("ID");

                    b.ToTable("ContatoRedeSocial");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoTelefone", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CodigoLocal");

                    b.Property<int>("CodigoNacional");

                    b.Property<string>("Descricao");

                    b.Property<Guid>("IdCliente");

                    b.Property<string>("Numero");

                    b.Property<string>("Operadora");

                    b.Property<int>("TipoContato");

                    b.HasKey("ID");

                    b.HasIndex("IdCliente");

                    b.ToTable("ContatoTelefone");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Departamento", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdPai");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("NomeExibir");

                    b.HasKey("ID");

                    b.ToTable("Departamento");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Endereco", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aliase");

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<string>("CodigoPostal");

                    b.Property<string>("Complemento");

                    b.Property<bool>("Deletado");

                    b.Property<Guid>("IdCidade");

                    b.Property<Guid>("IdCliente");

                    b.Property<string>("Logradouro");

                    b.Property<int>("Numero");

                    b.HasKey("ID");

                    b.HasIndex("IdCidade");

                    b.HasIndex("IdCliente");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Grupo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Grupo");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Loja", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativa");

                    b.Property<DateTime>("Atualizado");

                    b.Property<Guid?>("CMSID");

                    b.Property<string>("CNPJ");

                    b.Property<DateTime>("Cadatro");

                    b.Property<bool>("Deletada");

                    b.Property<string>("InscricaoEstadual");

                    b.Property<Guid>("LojaMatriz");

                    b.Property<bool>("Matriz");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("RazaoSocial");

                    b.HasKey("ID");

                    b.HasIndex("CMSID");

                    b.ToTable("Loja");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.LojaDepartamento", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdDepartamento");

                    b.Property<Guid>("IdLoja");

                    b.HasKey("ID");

                    b.HasIndex("IdDepartamento");

                    b.HasIndex("IdLoja");

                    b.ToTable("LojaDepartamento");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.LojaImagens", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Arquivo")
                        .IsRequired();

                    b.Property<string>("Formato")
                        .IsRequired();

                    b.Property<bool>("Icone");

                    b.Property<Guid>("IdLoja");

                    b.Property<bool>("Logomarca");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("IdLoja");

                    b.ToTable("LojaImagens");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Pais", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Provincia", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("CodigoISO");

                    b.Property<Guid>("IdPais");

                    b.Property<decimal>("ImpostoPermitido");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("IdPais");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Regiao", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativa");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Regiao");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.SistemaOperacional", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("SistemaOperacional");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.WebBrownser", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("WebBrownser");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Carrinho.Carrinho", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<string>("ChaveSeguranca");

                    b.Property<Guid>("IdCliente");

                    b.Property<Guid>("IdLoja");

                    b.Property<string>("OpcaoEnvio");

                    b.Property<bool>("PermitirPacoteSeparado");

                    b.Property<bool>("Reciclavel");

                    b.HasKey("ID");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdLoja");

                    b.ToTable("Carrinho");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Carrinho.CarrinhoProduto", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<Guid>("IdCarrinho");

                    b.Property<Guid>("IdProduto");

                    b.Property<int>("Quantidade");

                    b.HasKey("ID");

                    b.HasIndex("IdCarrinho");

                    b.HasIndex("IdProduto");

                    b.ToTable("CarrinhoProduto");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Cliente.Cliente", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<bool>("CadastroNewsLetter");

                    b.Property<string>("ChaveSeguranca");

                    b.Property<string>("Companhia");

                    b.Property<bool>("Deletado");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<bool>("ExibirPrecosPublicos");

                    b.Property<string>("GeneroCliente");

                    b.Property<int>("MaxDiasPagamentos");

                    b.Property<DateTime>("Nascimento");

                    b.Property<bool>("NewsLetter");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Nota");

                    b.Property<int>("PermissoesPendente");

                    b.Property<string>("Senha")
                        .IsRequired();

                    b.Property<string>("Usuario")
                        .IsRequired();

                    b.Property<bool>("Visitante");

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Cliente.ClienteMensagem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Audio");

                    b.Property<DateTime>("Data");

                    b.Property<DateTime>("Editada");

                    b.Property<Guid>("IdClienteProcesso");

                    b.Property<bool>("Lida");

                    b.Property<string>("Mensagem");

                    b.Property<bool>("Privada");

                    b.HasKey("ID");

                    b.HasIndex("IdClienteProcesso");

                    b.ToTable("ClienteMensagem");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Cliente.ClienteProcesso", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ClienteID");

                    b.Property<DateTime>("DataAtualizacao");

                    b.Property<DateTime>("DataCadastro");

                    b.Property<Guid>("IdOC");

                    b.Property<int>("Status");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("IdOC");

                    b.ToTable("ClienteProcesso");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMS", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("Atualizado");

                    b.Property<Guid?>("CMSCategoriaID");

                    b.Property<DateTime>("Cadastro");

                    b.Property<bool>("Indexado");

                    b.Property<int>("Posicao");

                    b.HasKey("ID");

                    b.HasIndex("CMSCategoriaID");

                    b.ToTable("CMS");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMSCategoria", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<Guid>("IdPai");

                    b.Property<bool>("LevelDepth");

                    b.Property<string>("Nome");

                    b.Property<int>("Posicao");

                    b.HasKey("ID");

                    b.ToTable("CMSCategoria");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMSEnderecoLoja", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ExibirMapa");

                    b.Property<Guid>("IdContatoLojaEndereco");

                    b.Property<byte[]>("Imagem");

                    b.Property<string>("ImagemType");

                    b.Property<decimal>("Latitute");

                    b.Property<decimal>("Longitude");

                    b.Property<string>("Observacao");

                    b.HasKey("ID");

                    b.HasIndex("IdContatoLojaEndereco");

                    b.ToTable("CMSEnderecoLoja");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMSLoja", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Icone");

                    b.Property<string>("IconeType");

                    b.Property<Guid>("IdLoja");

                    b.Property<byte[]>("Logo");

                    b.Property<byte[]>("Logo2");

                    b.Property<string>("LogoType");

                    b.Property<string>("LogoType2");

                    b.HasKey("ID");

                    b.HasIndex("IdLoja");

                    b.ToTable("CMSLoja");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMSRedeSocial", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Icone");

                    b.Property<string>("IconeType");

                    b.Property<Guid>("IdLoja");

                    b.Property<string>("Nome");

                    b.Property<string>("Url");

                    b.HasKey("ID");

                    b.HasIndex("IdLoja");

                    b.ToTable("CMSRedeSocial");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMSSlidePrincipal", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("ArquivoImage");

                    b.Property<string>("ArquivoType");

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<bool>("Categoria");

                    b.Property<DateTime>("DataFinal");

                    b.Property<DateTime>("DataInicio");

                    b.Property<Guid>("IdCategoria");

                    b.Property<Guid>("IdProduto");

                    b.Property<bool>("Produto");

                    b.Property<string>("Subtitulo");

                    b.Property<string>("TituloPrincipal");

                    b.HasKey("ID");

                    b.ToTable("CMSSlidePrincipal");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMSWhatsApp", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Exibir");

                    b.Property<Guid>("IDContatoLojaTelefone");

                    b.Property<string>("Observacao");

                    b.Property<bool>("Principal");

                    b.HasKey("ID");

                    b.HasIndex("IDContatoLojaTelefone");

                    b.ToTable("CMSWhatsApp");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.Acesso", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<string>("Comentario");

                    b.Property<bool>("Create");

                    b.Property<bool>("Delete");

                    b.Property<bool>("Edit");

                    b.Property<Guid>("IdModulo");

                    b.Property<Guid>("IdPerfil");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<Guid?>("PerfilID1");

                    b.Property<bool>("View");

                    b.HasKey("ID");

                    b.HasIndex("IdModulo");

                    b.HasIndex("IdPerfil");

                    b.HasIndex("PerfilID1");

                    b.ToTable("Acesso");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.Empregado", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<Guid>("IdPerfil");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<Guid?>("PerfilID");

                    b.Property<string>("Senha")
                        .IsRequired();

                    b.Property<DateTime>("UltimaConexao");

                    b.Property<string>("Usuario")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("PerfilID");

                    b.ToTable("Empregado");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.EmpregadoEndereco", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EmpregadoID1");

                    b.Property<Guid?>("EnderecoID");

                    b.Property<Guid>("IdEmpregado");

                    b.Property<Guid>("IdEndereco");

                    b.HasKey("ID");

                    b.HasIndex("EmpregadoID1");

                    b.HasIndex("EnderecoID");

                    b.HasIndex("IdEmpregado");

                    b.HasIndex("IdEndereco");

                    b.ToTable("EmpregadoEndereco");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.EmpregadoLoja", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EmpregadoID1");

                    b.Property<Guid>("IdEmpregado");

                    b.Property<Guid>("IdLoja");

                    b.Property<Guid?>("LojaID");

                    b.HasKey("ID");

                    b.HasIndex("EmpregadoID1");

                    b.HasIndex("IdEmpregado");

                    b.HasIndex("IdLoja");

                    b.HasIndex("LojaID");

                    b.ToTable("EmpregadoLoja");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.EmpregadoOC", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("EmpregadoID1");

                    b.Property<Guid>("IdEmpregado");

                    b.Property<Guid>("IdOC");

                    b.HasKey("ID");

                    b.HasIndex("EmpregadoID1");

                    b.HasIndex("IdEmpregado");

                    b.HasIndex("IdOC");

                    b.ToTable("EmpregadoOC");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.Modulo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<string>("Detalhes");

                    b.Property<bool>("HideHostMode");

                    b.Property<Guid>("IdPai");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("Posicao");

                    b.HasKey("ID");

                    b.ToTable("Modulo");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.Perfil", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Fabricante.Fabricante", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("DataAtualizacao");

                    b.Property<DateTime>("DataCadastro");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Fabricante");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Fabricante.FabricanteFornecedor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdFabricante");

                    b.Property<Guid>("IdFornecedor");

                    b.HasKey("ID");

                    b.HasIndex("IdFabricante");

                    b.HasIndex("IdFornecedor");

                    b.ToTable("FabricanteFornecedor");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Fabricante.FabricanteLoja", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdFabricante");

                    b.Property<Guid>("IdLoja");

                    b.HasKey("ID");

                    b.HasIndex("IdFabricante");

                    b.HasIndex("IdLoja");

                    b.ToTable("FabricanteLoja");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Fabricante.FabricanteProduto", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdFabricante");

                    b.Property<Guid>("IdProduto");

                    b.HasKey("ID");

                    b.HasIndex("IdFabricante");

                    b.HasIndex("IdProduto");

                    b.ToTable("FabricanteProduto");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Financeiro.MetodoPagamento", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Observacao");

                    b.HasKey("ID");

                    b.ToTable("MetodoPagamento");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Financeiro.Moeda", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<string>("CodigoIso")
                        .IsRequired();

                    b.Property<int>("CodigoIsoNumerico");

                    b.Property<bool>("Decimal");

                    b.Property<bool>("Deletado");

                    b.Property<bool>("EmBRanco");

                    b.Property<bool>("Formato");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<decimal>("TaxaConversao");

                    b.Property<string>("sign");

                    b.HasKey("ID");

                    b.ToTable("Moeda");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Fornecedor.Fornecedor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("DataAtualizacao");

                    b.Property<DateTime>("DataCadastro");

                    b.Property<string>("Nome");

                    b.HasKey("ID");

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Fornecedor.FornecedorLoja", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdFornecedor");

                    b.Property<Guid>("IdLoja");

                    b.HasKey("ID");

                    b.HasIndex("IdFornecedor");

                    b.HasIndex("IdLoja");

                    b.ToTable("FornecedorLoja");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.OC.OC", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<DateTime>("DataEnvio");

                    b.Property<decimal>("DescontoTotal");

                    b.Property<Guid>("IdCliente");

                    b.Property<Guid>("IdLoja");

                    b.Property<Guid>("IdMetotoPagamento");

                    b.Property<Guid>("IdOCStatus");

                    b.Property<string>("NumeroEnvio");

                    b.Property<decimal>("PagamentoReal");

                    b.Property<decimal>("PagamentoTotal");

                    b.Property<decimal>("ProdutoTotal");

                    b.Property<string>("Referencia");

                    b.Property<decimal>("TotalEnviado");

                    b.Property<bool>("Valido");

                    b.HasKey("ID");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdLoja");

                    b.HasIndex("IdMetotoPagamento");

                    b.HasIndex("IdOCStatus");

                    b.ToTable("OC");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.OC.OCDetalhes", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdOC");

                    b.Property<Guid>("IdProduto");

                    b.Property<string>("Observacao");

                    b.Property<int>("Quantidade");

                    b.HasKey("ID");

                    b.HasIndex("IdOC");

                    b.HasIndex("IdProduto");

                    b.ToTable("OCDetalhes");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.OC.OCFatura", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<DateTime>("Entrega");

                    b.Property<Guid>("IdOC");

                    b.Property<decimal>("ImpostoExlusaoPago");

                    b.Property<decimal>("ImpostoExlusaoTotal");

                    b.Property<decimal>("ImpostoInlusaoPago");

                    b.Property<decimal>("ImpostoInlusaoTotal");

                    b.Property<string>("Nota");

                    b.Property<int>("Numero");

                    b.Property<int>("NumeroEntrega");

                    b.Property<decimal>("TotalImpostoExclusaoEnvio");

                    b.Property<decimal>("TotalImpostoInclusaoEnvio");

                    b.Property<decimal>("TotalProdutosWT");

                    b.HasKey("ID");

                    b.HasIndex("IdOC");

                    b.ToTable("OCFatura");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.OC.OCMensagem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Data");

                    b.Property<Guid>("IdOC");

                    b.Property<bool>("Lida");

                    b.Property<string>("Mensagem");

                    b.Property<bool>("Privada");

                    b.HasKey("ID");

                    b.HasIndex("IdOC");

                    b.ToTable("OCMensagem");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.OC.OCPagamento", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Atualizado");

                    b.Property<string>("BandeiraCartao");

                    b.Property<DateTime>("Cadastro");

                    b.Property<DateTime>("CartaoVencimento");

                    b.Property<Guid>("IdOCFatura");

                    b.Property<DateTime>("NascimentoTitular");

                    b.Property<string>("NumeroCartao");

                    b.Property<string>("OCReferencia");

                    b.Property<int>("Quantidade");

                    b.Property<decimal>("TaxaConversao");

                    b.Property<string>("TitularCPF");

                    b.Property<string>("TitularCartao");

                    b.HasKey("ID");

                    b.HasIndex("IdOCFatura");

                    b.ToTable("OCPagamento");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.OC.OCStatus", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Cancelado");

                    b.Property<string>("Cor");

                    b.Property<bool>("Deletado");

                    b.Property<bool>("Entregado");

                    b.Property<bool>("Enviado");

                    b.Property<bool>("EnviarEmail");

                    b.Property<bool>("Faturado");

                    b.Property<bool>("Logable");

                    b.Property<string>("ModuloNome");

                    b.Property<bool>("NaoRemovivel");

                    b.Property<bool>("Oculto");

                    b.Property<bool>("Pago");

                    b.HasKey("ID");

                    b.ToTable("OCStatus");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.Atributo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Custmizavel");

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.Property<Guid?>("ProdutoID");

                    b.HasKey("ID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("Atributo");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.Categoria", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<Guid>("IDCategoriaPai");

                    b.Property<bool>("LevelDepth");

                    b.Property<int>("NLeft");

                    b.Property<int>("NRight");

                    b.Property<string>("Nome");

                    b.Property<int>("Posicao");

                    b.Property<bool>("Root");

                    b.HasKey("ID");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.CategoriaLoja", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdCategoria");

                    b.Property<Guid>("IdLoja");

                    b.Property<int>("Posicao");

                    b.HasKey("ID");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdLoja");

                    b.ToTable("CategoriaLoja");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.CategoriaProduto", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CategoriaID");

                    b.Property<Guid>("IdCategoria");

                    b.Property<Guid>("IdProduto");

                    b.Property<int>("Posicao");

                    b.Property<Guid?>("ProdutoID");

                    b.HasKey("ID");

                    b.HasIndex("CategoriaID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("CategoriaProduto");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.Produto", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Altura");

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<bool>("CampoTexto");

                    b.Property<Guid?>("CategoriaPadraoID");

                    b.Property<int>("Condicao");

                    b.Property<decimal>("CustoEnvio");

                    b.Property<bool>("Customizavel");

                    b.Property<bool>("DescontoPorQuantidade");

                    b.Property<string>("DescricaoCurta");

                    b.Property<bool>("Disponivel");

                    b.Property<bool>("DisponivelParaOC");

                    b.Property<string>("EAN13");

                    b.Property<decimal>("Ecotax");

                    b.Property<bool>("ExibirPreco");

                    b.Property<bool>("ForaDeEstoque");

                    b.Property<bool>("GerenciamentoAvancadoEstoque");

                    b.Property<Guid>("IdCategoriaPadrao");

                    b.Property<Guid>("IdLojaPadrao");

                    b.Property<decimal>("ImpactoPrecoUnitario");

                    b.Property<bool>("Indexado");

                    b.Property<decimal>("Largura");

                    b.Property<Guid?>("LojaPadraoID");

                    b.Property<string>("Nome");

                    b.Property<string>("NomeExibicao");

                    b.Property<decimal>("Peso");

                    b.Property<decimal>("Preco");

                    b.Property<decimal>("PrecoAtacado");

                    b.Property<bool>("ProdutoDigital");

                    b.Property<decimal>("Profundidade");

                    b.Property<int>("Quantidade");

                    b.Property<int>("QuantidadeMinima");

                    b.Property<string>("Referencia");

                    b.Property<string>("ReferenciaFabricante");

                    b.Property<string>("ReferenciaFornecedor");

                    b.Property<bool>("SomenteOnline");

                    b.Property<bool>("TemAnexoOculto");

                    b.Property<string>("UPC");

                    b.Property<string>("Unidade");

                    b.Property<bool>("UploadArquivos");

                    b.HasKey("ID");

                    b.HasIndex("CategoriaPadraoID");

                    b.HasIndex("LojaPadraoID");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoCategoria", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdCategoria");

                    b.Property<Guid>("IdProduto");

                    b.HasKey("ID");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdProduto");

                    b.ToTable("ProdutoCategoria");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoFornecedor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdFornecedor");

                    b.Property<Guid>("IdProduto");

                    b.Property<decimal>("PrecoFornecedor");

                    b.Property<string>("ReferenciaFornecedor");

                    b.HasKey("ID");

                    b.HasIndex("IdFornecedor");

                    b.HasIndex("IdProduto");

                    b.ToTable("ProdutoFornecedor");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoGrupo", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdGrupo");

                    b.Property<Guid>("IdProduto");

                    b.HasKey("ID");

                    b.HasIndex("IdProduto");

                    b.ToTable("ProdutoGrupo");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoImagem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Arquivo");

                    b.Property<DateTime>("Atualizada");

                    b.Property<DateTime>("Cadastro");

                    b.Property<string>("Formato");

                    b.Property<Guid>("IdProduto");

                    b.HasKey("ID");

                    b.HasIndex("IdProduto");

                    b.ToTable("ProdutoImagem");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoLoja", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<bool>("CampoTexto");

                    b.Property<decimal>("CustoEnvio");

                    b.Property<bool>("Customizavel");

                    b.Property<DateTime>("DataDisponibilidade");

                    b.Property<bool>("DisponiveParaOC");

                    b.Property<bool>("Disponivel");

                    b.Property<bool>("ExibirPreco");

                    b.Property<bool>("GerenciamentoAvancadoEstoque");

                    b.Property<Guid>("IdLoja");

                    b.Property<Guid>("IdProduto");

                    b.Property<bool>("Indexado");

                    b.Property<decimal>("Preco");

                    b.Property<decimal>("PrecoAtacado");

                    b.Property<decimal>("PrecoUnitario");

                    b.Property<bool>("ProdutoDigital");

                    b.Property<int>("QuantidadeMinima");

                    b.Property<int>("SituacaoProduto");

                    b.Property<bool>("SomenteOnline");

                    b.Property<string>("Unidade");

                    b.Property<bool>("UploadArquivos");

                    b.Property<int>("VisibilidadeProduto");

                    b.HasKey("ID");

                    b.HasIndex("IdLoja");

                    b.HasIndex("IdProduto");

                    b.ToTable("ProdutoLoja");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoPromocao", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Atualizado");

                    b.Property<DateTime>("Cadastro");

                    b.Property<DateTime>("DataFimPromocao");

                    b.Property<DateTime>("DataInicioPromocao");

                    b.Property<Guid>("IdProduto");

                    b.Property<decimal>("PercentualDesconto");

                    b.Property<decimal>("ValorAnterior");

                    b.Property<decimal>("ValorComDesconto");

                    b.Property<decimal>("ValorDesconto");

                    b.HasKey("ID");

                    b.HasIndex("IdProduto");

                    b.ToTable("ProdutoPromocao");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoPropriedade", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdProduto");

                    b.Property<Guid>("IdPropriedade");

                    b.HasKey("ID");

                    b.HasIndex("IdProduto");

                    b.HasIndex("IdPropriedade");

                    b.ToTable("ProdutoPropriedade");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoTag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdProduto");

                    b.Property<Guid>("IdTag");

                    b.HasKey("ID");

                    b.HasIndex("IdProduto");

                    b.HasIndex("IdTag");

                    b.ToTable("ProdutoTag");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoTransportadora", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdProduto");

                    b.Property<Guid>("IdTransportadora");

                    b.HasKey("ID");

                    b.HasIndex("IdProduto");

                    b.HasIndex("IdTransportadora");

                    b.ToTable("ProdutoTransportadora");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.Propriedade", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Customizavel");

                    b.Property<string>("Descricao");

                    b.Property<Guid?>("IdPai");

                    b.Property<string>("Nome");

                    b.Property<bool>("ValorUnico");

                    b.HasKey("ID");

                    b.ToTable("Propriedade");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.PropriedadeValor", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdPropriedade");

                    b.Property<string>("Nome");

                    b.Property<int>("TipoDado");

                    b.Property<string>("Valor");

                    b.HasKey("ID");

                    b.HasIndex("IdPropriedade");

                    b.ToTable("PropriedadeValor");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.Tag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.Property<string>("Valor");

                    b.HasKey("ID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Transportadora.Entrega", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<Guid>("IdOC");

                    b.Property<Guid>("IdTransportadora");

                    b.Property<decimal>("Peso");

                    b.Property<decimal>("Preco");

                    b.HasKey("ID");

                    b.HasIndex("IdOC");

                    b.HasIndex("IdTransportadora");

                    b.ToTable("Entrega");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Transportadora.FaixaDePeso", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Delimitador1");

                    b.Property<decimal>("Delimitador2");

                    b.Property<Guid>("IdTransportadora");

                    b.HasKey("ID");

                    b.HasIndex("IdTransportadora");

                    b.ToTable("FaixaDePeso");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Transportadora.FaixaDePreco", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Delimitador1");

                    b.Property<decimal>("Delimitador2");

                    b.Property<Guid>("IdTransportadora");

                    b.HasKey("ID");

                    b.HasIndex("IdTransportadora");

                    b.ToTable("FaixaDePreco");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Transportadora.Transportadora", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AlturaMaxima");

                    b.Property<bool>("Ativo");

                    b.Property<bool>("Deletado");

                    b.Property<bool>("EnvioExterno");

                    b.Property<decimal>("Grade");

                    b.Property<bool>("Gratis");

                    b.Property<string>("MetodoEnvio");

                    b.Property<bool>("Modulo");

                    b.Property<bool>("NeedRange");

                    b.Property<string>("Nome");

                    b.Property<string>("NomeModuloExterno");

                    b.Property<decimal>("PesoMaximo");

                    b.Property<int>("Posicao");

                    b.Property<decimal>("ProfundidadeMaxima");

                    b.Property<bool>("RangeBehavior");

                    b.Property<bool>("ShippingHandling");

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.ToTable("Transportadora");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Transportadora.TransportadoraEndereco", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdEndereco");

                    b.Property<Guid>("IdTranportadora");

                    b.HasKey("ID");

                    b.HasIndex("IdEndereco");

                    b.HasIndex("IdTranportadora");

                    b.ToTable("TransportadoraEndereco");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Transportadora.TransportadoraLoja", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("IdLoja");

                    b.Property<Guid>("IdTransportadora");

                    b.HasKey("ID");

                    b.HasIndex("IdLoja");

                    b.HasIndex("IdTransportadora");

                    b.ToTable("TransportadoraLoja");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Anexo", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.OC.OCMensagem", "OCMensagems")
                        .WithMany("Anexos")
                        .HasForeignKey("IdOCMensagem")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Cidade", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Provincia", "Provincia")
                        .WithMany("Cidades")
                        .HasForeignKey("IdProvincia")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoLoja", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("ContatoLojas")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoLojaEmail", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.ContatoEmail", "ContatoEmail")
                        .WithMany("ContatoLojaEmails")
                        .HasForeignKey("IdContatoEmail")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.ContatoLoja", "ContatoLoja")
                        .WithMany("ContatoLojaEmails")
                        .HasForeignKey("IdContatoLoja")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoLojaEndereco", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.ContatoLoja", "ContatoLoja")
                        .WithMany("ContatoLojaEnderecos")
                        .HasForeignKey("IdContatoLoja")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Endereco", "Endereco")
                        .WithMany("ContatoLojaEnderecos")
                        .HasForeignKey("IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoLojaRedeSocial", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.ContatoLoja", "ContatoLoja")
                        .WithMany("ContatoLojaRedeSocials")
                        .HasForeignKey("IdContatoLoja")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.ContatoRedeSocial", "ContatoRedeSocial")
                        .WithMany("ContatoLojaRedeSocials")
                        .HasForeignKey("IdContatoRedeSocial")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoLojaTelefone", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.ContatoLoja", "ContatoLoja")
                        .WithMany("ContatoLojaTelefones")
                        .HasForeignKey("IdContatoLoja")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.ContatoTelefone", "ContatoTelefone")
                        .WithMany("ContatoLojaTelefones")
                        .HasForeignKey("IdContatoTelefone")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.ContatoTelefone", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Cliente.Cliente", "Cliente")
                        .WithMany("ContatoTelefones")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Endereco", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Cidade", "Cidade")
                        .WithMany("Enderecos")
                        .HasForeignKey("IdCidade")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Cliente.Cliente", "Cliente")
                        .WithMany("Enderecos")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Loja", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CMS.CMS")
                        .WithMany("Lojas")
                        .HasForeignKey("CMSID");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.LojaDepartamento", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Departamento", "Departamento")
                        .WithMany("LojaDepartamentos")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("LojaDepartamentos")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.LojaImagens", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("LojaImagens")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CadastroBase.Provincia", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Pais", "Pais")
                        .WithMany("Provincias")
                        .HasForeignKey("IdPais")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Carrinho.Carrinho", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Cliente.Cliente", "Cliente")
                        .WithMany("Carrinhos")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("Carrinhos")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Carrinho.CarrinhoProduto", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Carrinho.Carrinho", "Carrinho")
                        .WithMany("CarrinhoProdutos")
                        .HasForeignKey("IdCarrinho")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("CarrinhoProdutos")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Cliente.ClienteMensagem", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Cliente.ClienteProcesso", "ClienteProcesso")
                        .WithMany("ClienteMensagens")
                        .HasForeignKey("IdClienteProcesso")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Cliente.ClienteProcesso", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Cliente.Cliente")
                        .WithMany("ClienteProcessos")
                        .HasForeignKey("ClienteID");

                    b.HasOne("SCommerce.Domain.Entities.OC.OC", "OC")
                        .WithMany("ClienteProcessos")
                        .HasForeignKey("IdOC")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMS", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CMS.CMSCategoria", "CMSCategoria")
                        .WithMany()
                        .HasForeignKey("CMSCategoriaID");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMSEnderecoLoja", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.ContatoLojaEndereco", "ContatoLojaEndereco")
                        .WithMany("CMSEnderecoLojas")
                        .HasForeignKey("IdContatoLojaEndereco")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMSLoja", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("CMSLojas")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMSRedeSocial", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("CMSRedeSocials")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.CMS.CMSWhatsApp", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.ContatoLojaTelefone", "ContatoLojaTelefone")
                        .WithMany("CMSWhatsApps")
                        .HasForeignKey("IDContatoLojaTelefone")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.Acesso", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Empregado.Modulo", "Modulo")
                        .WithMany("Acessos")
                        .HasForeignKey("IdModulo")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Empregado.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("IdPerfil")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Empregado.Perfil")
                        .WithMany("Acessos")
                        .HasForeignKey("PerfilID1");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.Empregado", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Empregado.Perfil", "Perfil")
                        .WithMany("Empregados")
                        .HasForeignKey("PerfilID");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.EmpregadoEndereco", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Empregado.Empregado")
                        .WithMany("EmpregadoEndereco")
                        .HasForeignKey("EmpregadoID1");

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Endereco")
                        .WithMany("EmpregadoEnderecos")
                        .HasForeignKey("EnderecoID");

                    b.HasOne("SCommerce.Domain.Entities.Empregado.Empregado", "Empregado")
                        .WithMany()
                        .HasForeignKey("IdEmpregado")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.EmpregadoLoja", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Empregado.Empregado")
                        .WithMany("EmpregadoLojas")
                        .HasForeignKey("EmpregadoID1");

                    b.HasOne("SCommerce.Domain.Entities.Empregado.Empregado", "Empregado")
                        .WithMany()
                        .HasForeignKey("IdEmpregado")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany()
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja")
                        .WithMany("EmpregadoLojas")
                        .HasForeignKey("LojaID");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Empregado.EmpregadoOC", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Empregado.Empregado")
                        .WithMany("EmpregadoOCs")
                        .HasForeignKey("EmpregadoID1");

                    b.HasOne("SCommerce.Domain.Entities.Empregado.Empregado", "Empregado")
                        .WithMany()
                        .HasForeignKey("IdEmpregado")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.OC.OC", "OC")
                        .WithMany("EmpregadoOCs")
                        .HasForeignKey("IdOC")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Fabricante.FabricanteFornecedor", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Fabricante.Fabricante", "Fabricante")
                        .WithMany("FabricanteFornecedor")
                        .HasForeignKey("IdFabricante")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Fornecedor.Fornecedor", "Fornecedor")
                        .WithMany("FabricanteFornecedors")
                        .HasForeignKey("IdFornecedor")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Fabricante.FabricanteLoja", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Fabricante.Fabricante", "Fabricante")
                        .WithMany("FabricanteLoja")
                        .HasForeignKey("IdFabricante")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("FabricanteLojas")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Fabricante.FabricanteProduto", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Fabricante.Fabricante", "Fabricante")
                        .WithMany("FabricanteProduto")
                        .HasForeignKey("IdFabricante")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("FabricanteProdutos")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Fornecedor.FornecedorLoja", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Fornecedor.Fornecedor", "Fornecedor")
                        .WithMany("FornecedorLoja")
                        .HasForeignKey("IdFornecedor")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("FornecedorLojas")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.OC.OC", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Cliente.Cliente", "Cliente")
                        .WithMany("OCs")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("OCs")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Financeiro.MetodoPagamento", "MetodoPagamento")
                        .WithMany("OCs")
                        .HasForeignKey("IdMetotoPagamento")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.OC.OCStatus", "OCStatus")
                        .WithMany("OCs")
                        .HasForeignKey("IdOCStatus")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.OC.OCDetalhes", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.OC.OC", "OC")
                        .WithMany("OCDetalhes")
                        .HasForeignKey("IdOC")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("OCDetalhes")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.OC.OCFatura", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.OC.OC", "OC")
                        .WithMany("OCFaturas")
                        .HasForeignKey("IdOC")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.OC.OCMensagem", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.OC.OC", "OC")
                        .WithMany("OCMensagens")
                        .HasForeignKey("IdOC")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.OC.OCPagamento", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.OC.OCFatura", "OCFatura")
                        .WithMany("OCPagamentos")
                        .HasForeignKey("IdOCFatura")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.Atributo", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoID");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.CategoriaLoja", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Produto.Categoria", "Categoria")
                        .WithMany("CategoriaLojas")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("CategoriaLojas")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.CategoriaProduto", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Produto.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaID");

                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoID");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.Produto", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Produto.Categoria", "CategoriaPadrao")
                        .WithMany()
                        .HasForeignKey("CategoriaPadraoID");

                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "LojaPadrao")
                        .WithMany()
                        .HasForeignKey("LojaPadraoID");
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoCategoria", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Produto.Categoria", "Categoria")
                        .WithMany("ProdutoCategorias")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("ProdutoCategorias")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoFornecedor", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Fornecedor.Fornecedor", "Fornecedor")
                        .WithMany("ProdutoFornecedors")
                        .HasForeignKey("IdFornecedor")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("ProdutoFornecedors")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoGrupo", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Grupo", "Grupo")
                        .WithMany("ProdutoGrupos")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("ProdutoGrupos")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoImagem", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("imagens")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoLoja", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("ProdutoLojas")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("ProdutoLojas")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoPromocao", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("ProdutoPromocaos")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoPropriedade", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("ProdutoPropriedades")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Produto.Propriedade", "Propriedade")
                        .WithMany("ProdutoPropriedades")
                        .HasForeignKey("IdPropriedade")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoTag", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("ProdutoTags")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Produto.Tag", "Tag")
                        .WithMany("ProdutoTags")
                        .HasForeignKey("IdTag")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.ProdutoTransportadora", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Produto.Produto", "Produto")
                        .WithMany("ProdutoTransportadoras")
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Transportadora.Transportadora", "Transportadora")
                        .WithMany("ProdutoTransportadoras")
                        .HasForeignKey("IdTransportadora")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Produto.PropriedadeValor", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Produto.Propriedade", "Propriedade")
                        .WithMany("propriedadeValors")
                        .HasForeignKey("IdPropriedade")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Transportadora.Entrega", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.OC.OC", "OC")
                        .WithMany("Entregas")
                        .HasForeignKey("IdOC")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Transportadora.Transportadora", "Transportadora")
                        .WithMany("Entregas")
                        .HasForeignKey("IdTransportadora")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Transportadora.FaixaDePeso", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Transportadora.Transportadora", "Transportadora")
                        .WithMany("FaixaDePeso")
                        .HasForeignKey("IdTransportadora")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Transportadora.FaixaDePreco", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.Transportadora.Transportadora", "Transportadora")
                        .WithMany("FaixaDePreco")
                        .HasForeignKey("IdTransportadora")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Transportadora.TransportadoraEndereco", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Endereco", "Endereco")
                        .WithMany("TransportadoraEnderecos")
                        .HasForeignKey("IdEndereco")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Transportadora.Transportadora", "Transportadora")
                        .WithMany("TransportadoraEndereco")
                        .HasForeignKey("IdTranportadora")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCommerce.Domain.Entities.Transportadora.TransportadoraLoja", b =>
                {
                    b.HasOne("SCommerce.Domain.Entities.CadastroBase.Loja", "Loja")
                        .WithMany("TransportadoraLojas")
                        .HasForeignKey("IdLoja")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCommerce.Domain.Entities.Transportadora.Transportadora", "Transportadora")
                        .WithMany("TransportadoraLoja")
                        .HasForeignKey("IdTransportadora")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
